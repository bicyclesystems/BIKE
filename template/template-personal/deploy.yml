# ðŸš€ Personal Project Deployment Configuration
# Multi-platform deployment templates

# === DOCKER CONFIGURATION ===
---
# Docker Compose for local development
version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - backend

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=mongodb://mongo:27017/myapp
      - JWT_SECRET=your-jwt-secret-here
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - mongo

  # Database
  mongo:
    image: mongo:5.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password

volumes:
  mongo_data:

---
# === NETLIFY CONFIGURATION ===
# netlify.toml
[build]
  publish = "dist"
  command = "npm run build"

[build.environment]
  NODE_VERSION = "18"

[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"

[[redirects]]
  from = "/api/*"
  to = "https://your-api-domain.com/api/:splat"
  status = 200
  force = true

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Environment variables (set in Netlify UI):
# REACT_APP_API_URL=https://your-api-domain.com/api
# REACT_APP_ENV=production

---
# === VERCEL CONFIGURATION ===
# vercel.json
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/static-build",
      "config": {
        "distDir": "dist"
      }
    }
  ],
  "routes": [
    {
      "src": "/api/(.*)",
      "dest": "https://your-api-domain.com/api/$1"
    },
    {
      "src": "/(.*)",
      "dest": "/index.html"
    }
  ],
  "env": {
    "REACT_APP_API_URL": "https://your-api-domain.com/api",
    "REACT_APP_ENV": "production"
  },
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        }
      ]
    }
  ]
}

---
# === HEROKU CONFIGURATION ===
# Procfile
web: npm start
release: npm run db:migrate

# app.json (for Heroku Review Apps)
{
  "name": "Personal Project",
  "description": "My awesome personal project",
  "keywords": ["node", "express", "react"],
  "website": "https://myproject.com",
  "repository": "https://github.com/username/myproject",
  "logo": "https://myproject.com/logo.png",
  "success_url": "/",
  "scripts": {
    "postdeploy": "npm run db:seed"
  },
  "env": {
    "NODE_ENV": {
      "description": "Node environment",
      "value": "production"
    },
    "JWT_SECRET": {
      "description": "JWT signing secret",
      "generator": "secret"
    },
    "DATABASE_URL": {
      "description": "Database connection string"
    }
  },
  "addons": [
    "heroku-postgresql:hobby-dev",
    "heroku-redis:hobby-dev"
  ],
  "buildpacks": [
    {
      "url": "heroku/nodejs"
    }
  ]
}

---
# === GITHUB ACTIONS CI/CD ===
# .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Run linting
      run: npm run lint
    
    - name: Build project
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v1.2
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

---
# === DOCKERFILE EXAMPLES ===

# Dockerfile.frontend
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build application
RUN npm run build

# Expose port
EXPOSE 3000

# Start application
CMD ["npm", "start"]

---
# Dockerfile.backend
FROM node:18-alpine

WORKDIR /app

# Install system dependencies
RUN apk add --no-cache python3 make g++

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Change ownership
RUN chown -R nextjs:nodejs /app
USER nextjs

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Start application
CMD ["npm", "start"]

---
# === ENVIRONMENT VARIABLES TEMPLATE ===
# .env.example
# Copy to .env and fill in your values

# Application
NODE_ENV=development
PORT=3000
APP_URL=http://localhost:3000

# Database
DATABASE_URL=mongodb://localhost:27017/myapp
REDIS_URL=redis://localhost:6379

# Authentication
JWT_SECRET=your-super-secret-jwt-key-here
JWT_EXPIRES_IN=7d

# API Keys
STRIPE_SECRET_KEY=sk_test_...
SENDGRID_API_KEY=SG...
CLOUDINARY_URL=cloudinary://...

# External Services
API_BASE_URL=http://localhost:8000/api
WEBHOOK_SECRET=whsec_...

# Feature Flags
ENABLE_ANALYTICS=true
ENABLE_NOTIFICATIONS=true
DEBUG_MODE=false

---
# === PACKAGE.JSON SCRIPTS ===
# Add these scripts to your package.json

{
  "scripts": {
    "dev": "npm run dev:frontend & npm run dev:backend",
    "dev:frontend": "vite",
    "dev:backend": "nodemon server.js",
    "build": "vite build",
    "build:docker": "docker build -t myproject .",
    "start": "node server.js",
    "test": "jest",
    "test:coverage": "jest --coverage",
    "lint": "eslint src/",
    "lint:fix": "eslint src/ --fix",
    "deploy:netlify": "netlify deploy --prod",
    "deploy:vercel": "vercel --prod",
    "deploy:heroku": "git push heroku main",
    "db:migrate": "npx prisma migrate deploy",
    "db:seed": "npx prisma db seed",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f"
  }
}

---
# === SECURITY HEADERS ===
# _headers (for Netlify)
/*
  X-Frame-Options: DENY
  X-Content-Type-Options: nosniff
  X-XSS-Protection: 1; mode=block
  Referrer-Policy: strict-origin-when-cross-origin
  Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' https:; frame-src 'none';

# === QUICK DEPLOYMENT CHECKLIST ===
# ðŸ“‹ Pre-deployment checklist:
# â–¡ Environment variables configured
# â–¡ Database migrations run
# â–¡ Tests passing
# â–¡ Build successful
# â–¡ Security headers configured
# â–¡ Error monitoring setup
# â–¡ Performance monitoring enabled
# â–¡ Backup strategy in place
# â–¡ SSL certificate configured
# â–¡ Custom domain configured (if applicable)

# ðŸš€ Choose your deployment method:
# â€¢ Static sites: Netlify, Vercel, GitHub Pages
# â€¢ Full-stack: Heroku, Railway, Render
# â€¢ Containerized: Docker + any cloud provider
# â€¢ Enterprise: AWS, Google Cloud, Azure

# ðŸ’¡ Pro tips:
# â€¢ Use environment-specific configs
# â€¢ Enable automatic deployments from main branch
# â€¢ Set up staging environments
# â€¢ Monitor deployment health
# â€¢ Keep deployment logs for debugging